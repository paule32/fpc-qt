<?xml version="1.0" encoding="utf-8"?>
<namespace name="QCharClass" platform="Win64">
  <struct name="ClassVHelper" size="60">
    <field name="VPointer" type="Pointer" visibility="public" size="8" offset="0" />
    <field name="VType" type="Cardinal" visibility="public" size="4" offset="8" />
    <field name="Value_u1" type="Byte" visibility="public" size="1" offset="12" />
    <field name="Value_u2" type="Word" visibility="public" size="2" offset="14" />
    <field name="Value_u3" type="Cardinal" visibility="public" size="4" offset="16" />
    <field name="Value_u4" type="UInt64" visibility="public" size="8" offset="20" />
    <field name="Value_s1" type="ShortInt" visibility="public" size="1" offset="28" />
    <field name="Value_s2" type="SmallInt" visibility="public" size="2" offset="30" />
    <field name="Value_s3" type="Integer" visibility="public" size="4" offset="32" />
    <field name="Value_s4" type="Int64" visibility="public" size="8" offset="36" />
    <field name="Length" type="UInt64" visibility="public" size="8" offset="44" />
    <field name="Name" type="PWideChar" visibility="public" size="8" offset="52" />
  </struct>
  <struct name="ResultVHelper" size="180">
    <field name="VType1" type="ClassVHelper" visibility="public" size="60" offset="0" />
    <field name="VType2" type="ClassVHelper" visibility="public" size="60" offset="60" />
    <field name="VType3" type="ClassVHelper" visibility="public" size="60" offset="120" />
  </struct>
  <const name="stQChar" type="Integer">
    <devnotes>
       Qt Klasse - QChar
    </devnotes>
    <value>
      $64
    </value>
  </const>
  <function name="ctor_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="s" type="PWideChar" />
      <parameter name="memvar" type="Pointer" />
      <retval type="Pointer" />
    </parameters>
  </function>
  <procedure name="dtor_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="Pointer" />
    </parameters>
  </procedure>
  <function name="isAlpha_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isAlphaNumber_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isAscii_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isBlank_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isDigit_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isLetter_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isLetterOrNumber_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isLower_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isMark_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isNonCharacter_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isNull_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isNumber_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isPrint_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isPunct_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isSpace_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isSurrogate_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isSymbol_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isTitleCase_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="isUpper_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Boolean" />
    </parameters>
  </function>
  <function name="toAscii_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Byte" />
    </parameters>
  </function>
  <function name="toLatin1_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Byte" />
    </parameters>
  </function>
  <function name="toLower_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Word" />
    </parameters>
  </function>
  <function name="toTitleCase_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Word" />
    </parameters>
  </function>
  <function name="toUpper_QChar" visibility="external public" callconv="cdecl">
    <parameters>
      <parameter name="v" type="UInt64" />
      <retval type="Word" />
    </parameters>
  </function>
  <class name="QChar">
    <devnotes>
       <summary>
        QChar ist eine Beispielklasse
       </summary>
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline" symflags="deprecated">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="CPP_ABI_1" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_2" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CPP_ABI_3" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <enum name="QChar_Category" visibility="public" alias="QCharClass.QChar_Category">
        <element value="0" name="Mark_NonSpacing" />
        <element value="1" name="Mark_SpacingCombining" />
        <element value="2" name="Mark_Enclosing" />
        <element value="3" name="Number_DecimalDigit" />
        <element value="4" name="Number_Letter" />
        <element value="5" name="Number_Other" />
        <element value="6" name="Separator_Space" />
        <element value="7" name="Separator_Line" />
        <element value="8" name="Separator_Paragraph" />
        <element value="9" name="Other_Control" />
        <element value="10" name="Other_Format" />
        <element value="11" name="Other_Surrogate" />
        <element value="12" name="Other_PrivateUse" />
        <element value="13" name="Other_NotAssigned" />
      </enum>
      <enum name="QChar_Decomposition" visibility="public" alias="QCharClass.QChar_Decomposition">
        <element value="0" name="NoDecomposition" />
        <element value="1" name="Canonical" />
        <element value="2" name="Font" />
        <element value="3" name="NoBreak" />
        <element value="4" name="Initial" />
        <element value="5" name="Medial" />
        <element value="6" name="Final" />
        <element value="7" name="Isolated" />
        <element value="8" name="Circle" />
        <element value="9" name="Super" />
        <element value="10" name="Sub" />
        <element value="11" name="Vertical" />
        <element value="12" name="Wide" />
        <element value="13" name="Narrow" />
        <element value="14" name="Small" />
        <element value="15" name="Square" />
        <element value="16" name="Compat" />
        <element value="17" name="Fraction" />
      </enum>
      <enum name="QChar_Direction" visibility="public" alias="QCharClass.QChar_Direction">
        <element value="0" name="DirL" />
        <element value="1" name="DirR" />
        <element value="2" name="DirEN" />
        <element value="3" name="DirES" />
        <element value="4" name="DirET" />
        <element value="5" name="DirAN" />
        <element value="6" name="DirCS" />
        <element value="7" name="DirB" />
        <element value="8" name="DirS" />
        <element value="9" name="DirWS" />
        <element value="10" name="DirON" />
        <element value="11" name="DirLRE" />
        <element value="12" name="DirLRO" />
        <element value="13" name="DirAL" />
        <element value="14" name="DirRLE" />
        <element value="15" name="DirRLO" />
        <element value="16" name="DirPDF" />
        <element value="17" name="DirNSM" />
        <element value="18" name="DirBN" />
        <element value="19" name="DirLRI" />
        <element value="20" name="DirRLI" />
        <element value="21" name="DirFSI" />
        <element value="22" name="DirPDI" />
      </enum>
      <field name="ClassName" type="PWideChar" visibility="private" size="8" offset="8" />
      <field name="ptr_val" type="ResultVHelper" visibility="private" size="180" offset="16" />
      <field name="c_type" type="Word" visibility="private" size="2" offset="196" />
      <field name="FCategory" type="QChar.QChar_Category" visibility="private" size="2" offset="198" />
      <field name="FDecomposition" type="QChar.QChar_Decomposition" visibility="private" size="2" offset="200" />
      <field name="FDirection" type="QChar.QChar_Direction" visibility="private" size="2" offset="202" />
      <function name="getOrigin" visibility="protected">
        <parameters>
          <retval type="UInt64" />
        </parameters>
      </function>
      <constructor name="Create" visibility="public">
        <devnotes>
<!-- Falsch strukturierter XML-Kommentar wird für Member 'Create' ignoriert -->
        </devnotes>
        <parameters>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz von QChar mit einen Byte als Parameter.
           </summary>
           <param name="c">
           Ein Byte für das Zeichen.
           </param>
           <remarks>
           Dies ist der Standardkonstruktors für QChar.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c" type="Byte" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für ein AnsiChar mit einen Byte als Parameter.
           </summary>
           <param name="c">
           Ein AnsiChar für das Zeichen.
           </param>
           <remarks>
           Dies ist der AnsiChar Konstruktor für QChar.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c" type="Char" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für ein DWORD Zeichen mit DWORD als Parameter.
           </summary>
           <param name="c">
           Ein DWORD für das Zeichen.
           </param>
           <remarks>
           Dies ist der DWORD Konstruktor für QChar.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c" type="Cardinal" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für ein WORD Zeichen mit WORD als Parameter.
           </summary>
           <param name="c">
           Ein WORD für das Zeichen.
           </param>
           <remarks>
           Dies ist der WORD Konstruktor für QChar.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c" type="Word" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für ein SmallInt Zeichen mit Parameter.
           </summary>
           <param name="c">
           Ein SmallInt für das Zeichen.
           </param>
           <remarks>
           Dies ist der SmallInt Konstruktor für QChar.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c" type="SmallInt" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <parameters>
          <parameter name="c" type="Pointer" />
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für zwei 8-Bit Array of Byte Zeichen, die im
           Parameter-Block angegeben sind.
           </summary>
           <param name="c">
           Ein Array of Byte für die Zeichen.
           </param>
           <remarks>
           Dies ist der Array of Byte Konstruktor für QChar.
           Jeder Array-Eintrag stellt ein 8-Bit Zeichen zur Verfügung.
           Es können mehr als zwei Einträge vorhanden sein, aber nur die
           ersten zwei Werte werden hierbei berücksichtigt.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c">
            <array name="c">
              <element type="Byte" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für zwei 8-Bit Array of Char Zeichen, die im
           Parameter-Block angegeben sind.
           </summary>
           <param name="c">
           Ein Array of Byte für die Zeichen.
           </param>
           <remarks>
           Dies ist der Array of Byte Konstruktor für QChar.
           Jeder Array-Eintrag stellt ein 8-Bit Zeichen zur Verfügung.
           Es können mehr als zwei Einträge vorhanden sein, aber nur die
           ersten zwei Werte werden hierbei berücksichtigt.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c">
            <array name="c">
              <element type="Char" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für zwei 16-Bit Array of Word Zeichen, die im
           Parameter-Block angegeben sind.
           </summary>
           <param name="c">
           Ein Array of Byte für die Zeichen.
           </param>
           <remarks>
           Dies ist der Array of Byte Konstruktor für QChar.
           Jeder Array-Eintrag stellt ein 16-Bit Zeichen zur Verfügung.
           Es können mehr als zwei Einträge vorhanden sein, aber nur die
           ersten zwei Werte werden hierbei berücksichtigt.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c">
            <array name="c">
              <element type="Word" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für zwei 32-Bit Array of DWord Zeichen, die im
           Parameter-Block angegeben sind.
           </summary>
           <param name="c">
           Ein Array of Byte für die Zeichen.
           </param>
           <remarks>
           Dies ist der Array of Byte Konstruktor für QChar.
           Jeder Array-Eintrag stellt ein 32-Bit Zeichen zur Verfügung.
           Es können mehr als zwei Einträge vorhanden sein, aber nur die
           ersten zwei Werte werden hierbei berücksichtigt.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c">
            <array name="c">
              <element type="Cardinal" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="Create" visibility="public">
        <devnotes>
           <summary>
           Erstellt eine Instanz für einen WideChar als Parameter.
           </summary>
           <param name="c">
           Ein WideChar für das Zeichen.
           </param>
           <remarks>
           Dies ist der WideChar Konstruktor für QChar.
           </remarks>
        </devnotes>
        <parameters>
          <parameter name="c">
            <array name="c">
              <element type="Pointer" />
            </array>
          </parameter>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public">
        <devnotes>
           <summary>
            Bereinigt eine Instanz der Klasse QChar.
           </summary>
        </devnotes>
        <parameters>
        </parameters>
      </destructor>
      <function name="Lt" visibility="public">
        <parameters>
          <parameter name="B" type="QChar" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="Eq" visibility="public">
        <parameters>
          <parameter name="B" type="QChar" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="Gt" visibility="public">
        <parameters>
          <parameter name="B" type="QChar" paramflags="const" />
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isAlpha" visibility="public">
        <devnotes>
           <summary>
              <de>eine alpha Funktion</de>
              <en>this is a alpha function</en>
           </summary>
           <returns>
              <de>Boolean True, wenn alpha. sonst False.</de>
              <en>Boolean True, if alpha. else False.</en>
           </returns>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isAlphaNumber" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isAscii" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isBlank" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isDigit" visibility="public">
        <devnotes>
           <summary>
           prüft, ob das gepeicherte QChar Zeichen ein einzelnes, mathematisches
           Objekt (Zahl) entspricht.
           </summary>
           <noparam>
           Boolean Funktion ohne Parameter
           </noparam>
           <remarks>
           Wurde die QChar Klasse mit einer Zahl initializiert wird die Funktion
           isDigit TRUE zurück geben, sonst FALSE.
           </remarks>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isLetter" visibility="public">
        <devnotes>
           <summary>
           prüft, ob das gepeicherte QChar Zeichen ein einzelnes, Schriftzeichen
           entspricht.
           </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isLetterOrNumber" visibility="public">
        <devnotes>
           <summary>
           prüft, ob das gepeicherte QChar Zeichen ein einzelnes, Schriftzeichen
           oder ein einzelnes mathematisches Objekt entspricht.
           </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isLower" visibility="public">
        <devnotes>
           <summary>
           prüft, ob das gepeicherte QChar Zeichen ein einzelnes, kleines
           Schriftzeichen entspricht.
           </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isMark" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isNonCharacter" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isNull" visibility="public">
        <devnotes>
           <summary>
           prüft, ob das gepeicherte QChar Zeichen null entspricht.
           </summary>
        </devnotes>
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isNumber" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isPrint" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isPunct" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isSpace" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isSurrogate" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isSymbol" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isTitleCase" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="isUpper" visibility="public">
        <parameters>
          <retval type="Boolean" />
        </parameters>
      </function>
      <function name="toLatin1" visibility="public">
        <parameters>
          <retval type="Word" />
        </parameters>
      </function>
      <function name="toLower" visibility="public">
        <parameters>
          <retval type="Word" />
        </parameters>
      </function>
      <function name="toTitleCase" visibility="public">
        <parameters>
          <retval type="Word" />
        </parameters>
      </function>
      <function name="toUpper" visibility="public">
        <parameters>
          <retval type="Word" />
        </parameters>
      </function>
      <property name="Category" visibility="published" read="FCategory" type="QChar.QChar_Category" default="13" />
      <property name="Decomposition" visibility="published" read="FDecomposition" type="QChar.QChar_Decomposition" default="0" />
      <property name="Direction" visibility="published" read="FDirection" type="QChar.QChar_Direction" default="2" />
    </members>
  </class>
</namespace>
